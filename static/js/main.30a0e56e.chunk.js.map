{"version":3,"sources":["components/FabButton.js","components/TopBar.js","components/ListItem.js","components/List.js","components/Dialog.js","components/TextDialog.js","components/SnackBar.js","App.js","serviceWorker.js","index.js"],"names":["FabButton","_this","this","react_default","a","createElement","onClick","createDialog","style","background","className","key","MDCRipple","document","querySelector","dialog","MDCDialog","open","React","Component","TopBar","ListItem","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","ripple","createRef","_this2","handleClick","ref","id","name","rippleItem","current","e","currentElement","getElementById","value","select","execCommand","snackbar","MDCSnackbar","List","listItems","listItemNotes","list","length","push","components_ListItem","text","Dialog","title","content","onSubmitCallback","onSubmit","buttonText","role","aria-modal","aria-labelledby","aria-describedby","type","data-mdc-dialog-action","TextDialog","createContent","htmlFor","console","log","click","ctrlKey","textField","MDCTextField","SnackBar","aria-live","App","notes","state","note","setState","components_TextDialog","handleAddNote","bind","components_TopBar","components_SnackBar","components_List","components_FabButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30a0e56e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {MDCRipple} from '@material/ripple';\r\nimport {MDCDialog} from \"@material/dialog/component\";\r\n\r\n\r\nclass FabButton extends React.Component {\r\n    dialog;\r\n    render() {\r\n        return <button onClick={() => this.createDialog()} style={{background: \"#26a69a\"}} className=\"mdc-fab button-top app-fab-absolute\" key={10}><span className=\"material-icons mdc-fab__icon\" key={102}>add</span></button>\r\n      }\r\n    \r\n      componentDidMount() {\r\n        const buttonRipple = new MDCRipple(document.querySelector('.mdc-fab'))\r\n      }\r\n\r\n      createDialog() {\r\n          this.dialog = new MDCDialog(document.querySelector('.create'));\r\n          this.dialog.open();\r\n      }\r\n}\r\n\r\nexport default FabButton;","import React from 'react';\r\n\r\nclass TopBar extends React.Component {\r\n    render() {\r\n        return <header className=\"mdc-top-app-bar\">\r\n          <div className=\"mdc-top-app-bar__row\">\r\n            <section className=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\" style={{background: \"#26a69a\"}}>\r\n              <span className=\"mdc-top-app-bar__title\">TinyClipboard 📋</span>\r\n            </section>\r\n          </div>\r\n        </header>\r\n      }\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\nimport {MDCList} from '@material/list';\r\nimport {MDCRipple} from \"@material/ripple/component\";\r\nimport {MDCDialog} from \"@material/dialog/component\";\r\nimport {MDCSnackbar} from \"@material/snackbar/component\";\r\n\r\nclass ListItem extends React.Component {\r\n\r\n  name;\r\n  text;\r\n  ripple;\r\n  rippleItem;\r\n    currentElement;\r\n    snackbar;\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.ripple = React.createRef();\r\n  }\r\n\r\n  render() {\r\n      return <li onClick={() => this.handleClick()} className=\"mdc-list-item\" ref={this.ripple} id={this.props.name}><span className=\"mdc-list-otem__text\">{this.props.name}</span></li>;\r\n    }\r\n\r\n  componentDidMount() {\r\n      this.rippleItem = new MDCRipple(this.ripple.current)\r\n  }\r\n\r\n  handleClick(e) {\r\n      this.dialog = new MDCDialog(document.querySelector('.paste'));\r\n      this.currentElement = document.getElementById(\"input-field_paste\");\r\n      this.currentElement.value = this.props.name;\r\n      this.currentElement.select();\r\n      document.execCommand(\"copy\");\r\n      this.snackbar = new MDCSnackbar(document.querySelector(\".copied\"));\r\n      this.snackbar.open()\r\n  }\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport {MDCList} from '@material/list';\r\nimport ListItem from \"./ListItem\";\r\nimport {MDCRipple} from \"@material/ripple/component\";\r\nimport App from \"../App\"\r\n\r\n\r\nclass List extends React.Component {\r\n\r\n  ripple;\r\n  static listItemNotes = [];\r\n  listItems = [];\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      List.listItemNotes = props.list\r\n      }\r\n\r\n  render() {\r\n      List.listItemNotes = this.props.list;\r\n      let i;\r\n      if (List.listItemNotes.length !== 0) {\r\n          this.listItems.push(<ListItem key={\"item_\" + List.listItemNotes.length} value={List.listItemNotes - 1} name={List.listItemNotes[List.listItemNotes.length - 1]} />)\r\n      }\r\n\r\n\r\n      return <ul className=\"mdc-list\" >\r\n          {this.listItems}\r\n      </ul>\r\n    }\r\n\r\n  componentDidMount() {\r\n\r\n      // this.ripple = new MDCRipple(this.listItems.current)\r\n  }\r\n\r\n  addToList(name, text) {\r\n      //     let button = document.querySelector(\".\");\r\n      // List.listItemNotes.push({name: name, text: text});\r\n      // this.setState({notes: List.listItemNotes})\r\n  }\r\n}\r\n\r\nexport default List;","import React from \"react\";\r\n\r\nclass Dialog extends React.Component{\r\n\r\n    onSubmitCallback;\r\n    title;\r\n    content;\r\n    name;\r\n    buttonText;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.title = props.title;\r\n        this.content = props.content;\r\n        this.name = props.name;\r\n        this.onSubmitCallback = props.onSubmit;\r\n        if(this.name === \"create\") {\r\n            this.buttonText = \"Paste\"\r\n        } else {\r\n            this.buttonText = \"OK\"\r\n        }\r\n    }\r\n\r\n    createDialog() {\r\n        return (<div className={\"mdc-dialog \" + this.name} id={\"mdc-dialog-\" + this.name} role={\"alertdialog\"} aria-modal={\"true\"} aria-labelledby={\"my-dialog-title\"} aria-describedby={\"my-dialog-content\"}>\r\n            <div className={\"mdc-dialog__container\"}>\r\n                <div className={\"mdc-dialog__surface\"}>\r\n                    <h2 className={\"mdc-dialog__title\"}>\r\n                        {this.title}\r\n                    </h2>\r\n                    <div className={\"mdc-dialog__content\"}>\r\n                        {this.content}\r\n                    </div>\r\n                    <footer className={\"mdc-dialog__actions\"}>\r\n                        <button onClick={() => this.onSubmit()} type={\"button\"} id={\"paste-button\"} className={\"mdc-button mdc-dialog__button\"} data-mdc-dialog-action={\"no\"}>\r\n                            <span className={\"mdc-button__label\"}>{this.buttonText}</span>\r\n                        </button>\r\n                    </footer>\r\n                </div>\r\n            </div>\r\n            <div className={\"mdc-dialog__scrim\"}></div>\r\n        </div>)\r\n    }\r\n\r\n    onSubmit() {\r\n        this.onSubmitCallback();\r\n    }\r\n\r\n    render() {\r\n        return this.createDialog();\r\n    }\r\n\r\n\r\n    static insertNote() {\r\n    }\r\n\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport {MDCList} from '@material/list';\r\nimport Dialog from \"./Dialog\";\r\nimport {MDCTextField} from \"@material/textfield/component\";\r\nimport {MDCDialog} from \"@material/dialog/component\";\r\nimport FabButton from \"./FabButton\";\r\n\r\nclass TextDialog extends Dialog {\r\n\r\n    dialog;\r\n    textField;\r\n    ripple;\r\n    dialog;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.content = this.createContent();\r\n    }\r\n\r\n    createContent() {\r\n        return (\r\n            <div className={\"mdc-text-field \" + this.name + \"_ripple\"}>\r\n                <input type={\"text\"} className={\"mdc-text-field__input\"} id={\"input-field_\" + this.name}/>\r\n                <label className={\"mdc-floating-label\"} htmlFor={\"input-field\"}>Text</label>\r\n                <div className={\"mdc-line-ripple\"}></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return this.createDialog();\r\n    }\r\n\r\n    handleKey(e) {\r\n        console.log(document.getElementById(\"paste-button\").click());\r\n        if(e.ctrlKey && e.key === \"v\") {\r\n        }\r\n    }\r\n\r\n    onSubmit() {\r\n                if(this.name === \"create\") {\r\n                    this.onSubmitCallback(this.textField.value);\r\n                }\r\n    }\r\n\r\nl\r\n    componentDidMount() {\r\n        this.textField = new MDCTextField(document.querySelector(\".\" + this.name + \"_ripple\"))\r\n    }\r\n}\r\n\r\nexport default TextDialog;","import React from 'react';\r\nimport {MDCRipple} from '@material/ripple';\r\nimport {MDCDialog} from \"@material/dialog/component\";\r\n\r\n\r\nclass SnackBar extends React.Component {\r\n    dialog;\r\n    render() {\r\n        return <div className={\"mdc-snackbar \" + this.props.name}>\r\n            <div className={\"mdc-snackbar__surface\"}>\r\n                <div className={\"mdc-snackbar__label\"} role={\"status\"} aria-live={\"polite\"}>\r\n                    {this.props.text}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default SnackBar;","import React from 'react';\r\nimport './App.css';\r\nimport FabButton from './components/FabButton';\r\nimport TopBar from './components/TopBar';\r\nimport List from './components/List';\r\nimport TextDialog from \"./components/TextDialog\";\r\nimport SnackBar from \"./components/SnackBar\";\r\n\r\nclass App extends React.Component {\r\n\r\n    dialog;\r\n    notes = [];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            notes: []\r\n        };\r\n    }\r\n\r\n    handleAddNote(note) {\r\n        this.notes.push(note);\r\n        console.log(this.state.notes);\r\n        this.setState({\r\n         notes: this.notes\r\n        }\r\n    )\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (<div>\r\n                <TextDialog title={\"Paste it!\"} name={\"paste\"} onSubmit={this.handleAddNote.bind(this)} />\r\n                <TextDialog title={\"Paste in here\"} name={\"create\"} onSubmit={this.handleAddNote.bind(this)} />\r\n                <TopBar/>\r\n                <SnackBar text={\"Copied to your clipboard 😁\"} name={\"copied\"} />\r\n                <List list={this.notes}/>\r\n                <FabButton/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}