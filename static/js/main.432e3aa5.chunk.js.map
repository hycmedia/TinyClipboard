{"version":3,"sources":["components/FabButton.js","components/TopBar.js","components/ListItem.js","components/List.js","components/Dialog.js","components/TextDialog.js","components/SnackBar.js","App.js","serviceWorker.js","index.js"],"names":["FabButton","_this","this","react_default","a","createElement","onClick","createDialog","style","background","className","key","MDCRipple","document","querySelector","dialog","MDCDialog","open","React","Component","TopBar","ListItem","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","ripple","createRef","_this2","handleClick","ref","id","name","rippleItem","current","e","currentElement","getElementById","value","select","execCommand","snackbar","MDCSnackbar","List","listItems","listItemNotes","list","length","push","components_ListItem","text","Dialog","title","content","onSubmitCallback","onSubmit","buttonText","role","aria-modal","aria-labelledby","aria-describedby","type","data-mdc-dialog-action","TextDialog","createContent","htmlFor","console","log","click","ctrlKey","textField","MDCTextField","SnackBar","aria-live","App","notes","state","note","setState","components_TextDialog","handleAddNote","bind","components_TopBar","components_SnackBar","components_List","components_FabButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.432e3aa5.chunk.js","sourcesContent":["import React from 'react';\nimport {MDCRipple} from '@material/ripple';\nimport {MDCDialog} from \"@material/dialog/component\";\n\n\nclass FabButton extends React.Component {\n    dialog;\n    render() {\n        return <button onClick={() => this.createDialog()} style={{background: \"#26a69a\"}} className=\"mdc-fab button-top app-fab-absolute\" key={10}><span className=\"material-icons mdc-fab__icon\" key={102}>add</span></button>\n      }\n    \n      componentDidMount() {\n        const buttonRipple = new MDCRipple(document.querySelector('.mdc-fab'))\n      }\n\n      createDialog() {\n          this.dialog = new MDCDialog(document.querySelector('.create'));\n          this.dialog.open();\n      }\n}\n\nexport default FabButton;","import React from 'react';\n\nclass TopBar extends React.Component {\n    render() {\n        return <header className=\"mdc-top-app-bar\">\n          <div className=\"mdc-top-app-bar__row\">\n            <section className=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\" style={{background: \"#26a69a\"}}>\n              <span className=\"mdc-top-app-bar__title\">TinyClipboard 📋</span>\n            </section>\n          </div>\n        </header>\n      }\n}\n\nexport default TopBar;","import React from 'react';\nimport {MDCList} from '@material/list';\nimport {MDCRipple} from \"@material/ripple/component\";\nimport {MDCDialog} from \"@material/dialog/component\";\nimport {MDCSnackbar} from \"@material/snackbar/component\";\n\nclass ListItem extends React.Component {\n\n  name;\n  text;\n  ripple;\n  rippleItem;\n    currentElement;\n    snackbar;\n\n  constructor(props) {\n      super(props);\n      this.ripple = React.createRef();\n  }\n\n  render() {\n      return <li onClick={() => this.handleClick()} className=\"mdc-list-item\" ref={this.ripple} id={this.props.name}><span className=\"mdc-list-otem__text\">{this.props.name}</span></li>;\n    }\n\n  componentDidMount() {\n      this.rippleItem = new MDCRipple(this.ripple.current)\n  }\n\n  handleClick(e) {\n      this.dialog = new MDCDialog(document.querySelector('.paste'));\n      this.currentElement = document.getElementById(\"input-field_paste\");\n      this.currentElement.value = this.props.name;\n      this.currentElement.select();\n      document.execCommand(\"copy\");\n      this.snackbar = new MDCSnackbar(document.querySelector(\".copied\"));\n      this.snackbar.open()\n  }\n}\n\nexport default ListItem;","import React from 'react';\nimport {MDCList} from '@material/list';\nimport ListItem from \"./ListItem\";\nimport {MDCRipple} from \"@material/ripple/component\";\nimport App from \"../App\"\n\n\nclass List extends React.Component {\n\n  ripple;\n  static listItemNotes = [];\n  listItems = [];\n\n  constructor(props) {\n      super(props);\n      List.listItemNotes = props.list\n      }\n\n  render() {\n      List.listItemNotes = this.props.list;\n      let i;\n      if (List.listItemNotes.length !== 0) {\n          this.listItems.push(<ListItem key={\"item_\" + List.listItemNotes.length} value={List.listItemNotes - 1} name={List.listItemNotes[List.listItemNotes.length - 1]} />)\n      }\n\n\n      return <ul className=\"mdc-list\" >\n          {this.listItems}\n      </ul>\n    }\n\n  componentDidMount() {\n\n      // this.ripple = new MDCRipple(this.listItems.current)\n  }\n\n  addToList(name, text) {\n      //     let button = document.querySelector(\".\");\n      // List.listItemNotes.push({name: name, text: text});\n      // this.setState({notes: List.listItemNotes})\n  }\n}\n\nexport default List;","import React from \"react\";\n\nclass Dialog extends React.Component{\n\n    onSubmitCallback;\n    title;\n    content;\n    name;\n    buttonText;\n\n    constructor(props) {\n        super(props);\n        this.title = props.title;\n        this.content = props.content;\n        this.name = props.name;\n        this.onSubmitCallback = props.onSubmit;\n        if(this.name === \"create\") {\n            this.buttonText = \"Paste\"\n        } else {\n            this.buttonText = \"OK\"\n        }\n    }\n\n    createDialog() {\n        return (<div className={\"mdc-dialog \" + this.name} id={\"mdc-dialog-\" + this.name} role={\"alertdialog\"} aria-modal={\"true\"} aria-labelledby={\"my-dialog-title\"} aria-describedby={\"my-dialog-content\"}>\n            <div className={\"mdc-dialog__container\"}>\n                <div className={\"mdc-dialog__surface\"}>\n                    <h2 className={\"mdc-dialog__title\"}>\n                        {this.title}\n                    </h2>\n                    <div className={\"mdc-dialog__content\"}>\n                        {this.content}\n                    </div>\n                    <footer className={\"mdc-dialog__actions\"}>\n                        <button onClick={() => this.onSubmit()} type={\"button\"} id={\"paste-button\"} className={\"mdc-button mdc-dialog__button\"} data-mdc-dialog-action={\"no\"}>\n                            <span className={\"mdc-button__label\"}>{this.buttonText}</span>\n                        </button>\n                    </footer>\n                </div>\n            </div>\n            <div className={\"mdc-dialog__scrim\"}></div>\n        </div>)\n    }\n\n    onSubmit() {\n        this.onSubmitCallback();\n    }\n\n    render() {\n        return this.createDialog();\n    }\n\n\n    static insertNote() {\n    }\n\n}\n\nexport default Dialog;","import React from 'react';\nimport {MDCList} from '@material/list';\nimport Dialog from \"./Dialog\";\nimport {MDCTextField} from \"@material/textfield/component\";\nimport {MDCDialog} from \"@material/dialog/component\";\nimport FabButton from \"./FabButton\";\n\nclass TextDialog extends Dialog {\n\n    dialog;\n    textField;\n    ripple;\n    dialog;\n\n    constructor(props) {\n        super(props);\n        this.content = this.createContent();\n    }\n\n    createContent() {\n        return (\n            <div className={\"mdc-text-field \" + this.name + \"_ripple\"}>\n                <input type={\"text\"} className={\"mdc-text-field__input\"} id={\"input-field_\" + this.name}/>\n                <label className={\"mdc-floating-label\"} htmlFor={\"input-field\"}>Text</label>\n                <div className={\"mdc-line-ripple\"}></div>\n            </div>\n        )\n    }\n\n    render() {\n        return this.createDialog();\n    }\n\n    handleKey(e) {\n        console.log(document.getElementById(\"paste-button\").click());\n        if(e.ctrlKey && e.key === \"v\") {\n        }\n    }\n\n    onSubmit() {\n                if(this.name === \"create\") {\n                    this.onSubmitCallback(this.textField.value);\n                }\n    }\n\nl\n    componentDidMount() {\n        this.textField = new MDCTextField(document.querySelector(\".\" + this.name + \"_ripple\"))\n    }\n}\n\nexport default TextDialog;","import React from 'react';\nimport {MDCRipple} from '@material/ripple';\nimport {MDCDialog} from \"@material/dialog/component\";\n\n\nclass SnackBar extends React.Component {\n    dialog;\n    render() {\n        return <div className={\"mdc-snackbar \" + this.props.name}>\n            <div className={\"mdc-snackbar__surface\"}>\n                <div className={\"mdc-snackbar__label\"} role={\"status\"} aria-live={\"polite\"}>\n                    {this.props.text}\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default SnackBar;","import React from 'react';\nimport './App.css';\nimport FabButton from './components/FabButton';\nimport TopBar from './components/TopBar';\nimport List from './components/List';\nimport TextDialog from \"./components/TextDialog\";\nimport SnackBar from \"./components/SnackBar\";\n\nclass App extends React.Component {\n\n    dialog;\n    notes = [];\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            notes: []\n        };\n    }\n\n    handleAddNote(note) {\n        this.notes.push(note);\n        console.log(this.state.notes);\n        this.setState({\n         notes: this.notes\n        }\n    )\n    }\n\n\n\n    render() {\n        return (<div>\n                <TextDialog title={\"Paste it!\"} name={\"paste\"} onSubmit={this.handleAddNote.bind(this)} />\n                <TextDialog title={\"Paste in here\"} name={\"create\"} onSubmit={this.handleAddNote.bind(this)} />\n                <TopBar/>\n                <SnackBar text={\"Copied to your clipboard 😁\"} name={\"copied\"} />\n                <List list={this.notes}/>\n                <FabButton/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}